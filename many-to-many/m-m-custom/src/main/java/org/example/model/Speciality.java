package org.example.model;

import jakarta.persistence.*;
import lombok.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * <pre>
 * CREATE TABLE specialties (
 *     id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
 * )
 */
@Entity
@Table(name = "specialties")
@NoArgsConstructor @AllArgsConstructor
@Getter @Setter
@ToString
public class Speciality {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @OneToMany(mappedBy = "speciality", cascade = CascadeType.ALL, orphanRemoval = true)
    @Getter(AccessLevel.PROTECTED)
    @Setter(AccessLevel.PROTECTED)
    @ToString.Exclude
    private List<PersonSpeciality> personsSpecialties = new ArrayList<>();

    // Utility methods that synchronize both ends whenever a parent element is retrieved, added or removed.
    public List<Person> getPersons() {
        return personsSpecialties.stream()
                .map(PersonSpeciality::getPerson)
                .distinct()
                .toList();
    }

    public void addPersons(Collection<Person> persons) {
        persons.forEach(this::addPerson);
    }
    public void addPerson(Person person) {
        var personSpeciality = new PersonSpeciality(person, this);
        personSpeciality.addAssociationToBothSides();
    }

    public void removePersons(Collection<Person> persons) {
        persons.forEach(this::removePerson);
    }
    public void removePerson(Person person) {
        var personSpeciality = new PersonSpeciality(person, this);
        personSpeciality.removeAssociationFromBothSides();
    }
}
