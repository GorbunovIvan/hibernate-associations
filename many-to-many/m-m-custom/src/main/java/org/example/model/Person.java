package org.example.model;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * <pre>
 * CREATE TABLE persons (
 *     id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
 * );
 */
@Entity
@Table(name = "persons")
@NoArgsConstructor @AllArgsConstructor
@Getter @Setter
@ToString
public class Person {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @OneToMany(mappedBy = "person", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
    @Fetch(FetchMode.SUBSELECT)  // To avoid "N+1", when "personsSpecialties" are fetched for "persons"
    @Getter(AccessLevel.PROTECTED)
    @Setter(AccessLevel.PROTECTED)
    @ToString.Exclude
    private List<PersonSpeciality> personsSpecialties = new ArrayList<>();


    // Utility methods that synchronize both ends whenever a parent element is retrieved, added or removed
    @ToString.Include(name = "specialties")
    public List<Speciality> getSpecialties() {
        return personsSpecialties.stream()
                .map(PersonSpeciality::getSpeciality)
                .distinct()
                .toList();
    }

    public void addSpecialties(Collection<Speciality> specialties) {
        specialties.forEach(this::addSpeciality);
    }
    public void addSpeciality(Speciality speciality) {
        var personSpeciality = new PersonSpeciality(this, speciality);
        personSpeciality.addAssociationToBothSides();
    }

    public void removeSpecialties(Collection<Speciality> specialties) {
        specialties.forEach(this::removeSpeciality);
    }
    public void removeSpeciality(Speciality speciality) {
        var personSpeciality = new PersonSpeciality(this, speciality);
        personSpeciality.removeAssociationFromBothSides();
    }
}
